% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R
\docType{methods}
\name{combinePlates}
\alias{combinePlates}
\title{Combine chemistry plates into batches}
\usage{
combinePlates(object, plate, THR = 0.1)
}
\arguments{
\item{object}{see \code{showMethods(combinePlates)}}

\item{plate}{a vector labelling from which batch each observation came from.}

\item{THR}{threshold below which the null hypothesis should be rejected and batches are collapsed.}
}
\value{
The new batch value.
}
\description{
In high-throughput assays, low-level summaries of copy number at
copy number polymorphic loci (e.g., the mean log R ratio for each
sample, or a principal-component derived summary) often differ
between groups of samples due to technical sources of variation
such as reagents, technician, or laboratory.  Technical (as opposed
to biological) differences between groups of samples are referred
to as batch effects.  A useful surrogate for batch is the chemistry
plate on which the samples were hybridized. In large studies, a
Bayesian hierarchical mixture model with plate-specific means and
variances is computationally prohibitive.  However, chemistry
plates processed at similar times may be qualitatively similar in
terms of the distribution of the copy number summary statistic.
Further, we have observed that some copy number polymorphic loci
exhibit very little evidence of a batch effect, while other loci
are more prone to technical variation.  We suggest combining plates
that are qualitatively similar in terms of the Kolmogorov-Smirnov
two-sample test of the distribution and to implement this test
independently for each candidate copy number polymophism identified
in a study.  The \code{combinePlates} function is a wrapper to the
\code{ks.test} implemented in the \code{stats} package that
compares all pairwise combinations of plates.  The \code{ks.test}
is performed recursively on the batch variables defined for a given
CNP until no batches can be combined.
}
\examples{
bt <- combinePlates(y(MultiBatchModelExample), batch(MultiBatchModelExample))
batches <- as.integer(factor(bt))
model <- MultiBatchModel2(dat=y(MultiBatchModelExample),
                          hp=hpList(k=k(MultiBatchModelExample))[["MB"]],
                          batches=batches, mp=mcmcParams(MultiBatchModelExample))
}
